// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctrpc.proto

/*
Package ctrpcpt is a generated protocol buffer package.

It is generated from these files:
	ctrpc.proto

It has these top-level messages:
	KeepAliveRequest
	KeepAliveReply
	LoginRequest
	LoginReply
*/
package ctrpcpt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// KeepAlive
type KeepAliveRequest struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
}

func (m *KeepAliveRequest) Reset()                    { *m = KeepAliveRequest{} }
func (m *KeepAliveRequest) String() string            { return proto.CompactTextString(m) }
func (*KeepAliveRequest) ProtoMessage()               {}
func (*KeepAliveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeepAliveRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type KeepAliveReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *KeepAliveReply) Reset()                    { *m = KeepAliveReply{} }
func (m *KeepAliveReply) String() string            { return proto.CompactTextString(m) }
func (*KeepAliveReply) ProtoMessage()               {}
func (*KeepAliveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeepAliveReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// login
type LoginRequest struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type LoginReply struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginReply) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*KeepAliveRequest)(nil), "ctrpcpt.KeepAliveRequest")
	proto.RegisterType((*KeepAliveReply)(nil), "ctrpcpt.KeepAliveReply")
	proto.RegisterType((*LoginRequest)(nil), "ctrpcpt.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "ctrpcpt.LoginReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CTRPC service

type CTRPCClient interface {
	// KeepAlive rpc
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error)
	// Login
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type cTRPCClient struct {
	cc *grpc.ClientConn
}

func NewCTRPCClient(cc *grpc.ClientConn) CTRPCClient {
	return &cTRPCClient{cc}
}

func (c *cTRPCClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error) {
	out := new(KeepAliveReply)
	err := grpc.Invoke(ctx, "/ctrpcpt.CTRPC/KeepAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTRPCClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/ctrpcpt.CTRPC/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CTRPC service

type CTRPCServer interface {
	// KeepAlive rpc
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error)
	// Login
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

func RegisterCTRPCServer(s *grpc.Server, srv CTRPCServer) {
	s.RegisterService(&_CTRPC_serviceDesc, srv)
}

func _CTRPC_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRPCServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrpcpt.CTRPC/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRPCServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctrpcpt.CTRPC/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTRPCServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctrpcpt.CTRPC",
	HandlerType: (*CTRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _CTRPC_KeepAlive_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _CTRPC_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctrpc.proto",
}

func init() { proto.RegisterFile("ctrpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2e, 0x29, 0x2a,
	0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0x73, 0x0a, 0x4a, 0x94, 0xd4, 0xb8,
	0x04, 0xbc, 0x53, 0x53, 0x0b, 0x1c, 0x73, 0x32, 0xcb, 0x52, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x32, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83,
	0xc0, 0x6c, 0x25, 0x0d, 0x2e, 0x3e, 0x24, 0x75, 0x05, 0x39, 0x95, 0x42, 0x62, 0x5c, 0x6c, 0x45,
	0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x60, 0x75, 0xac, 0x41, 0x50, 0x9e, 0x92, 0x02, 0x17, 0x8f, 0x4f,
	0x7e, 0x7a, 0x66, 0x1e, 0xcc, 0x34, 0x01, 0x2e, 0xe6, 0xd2, 0xcc, 0x14, 0xa8, 0x61, 0x20, 0xa6,
	0x92, 0x0a, 0x17, 0x17, 0x54, 0x05, 0xa6, 0x39, 0x9c, 0x30, 0x73, 0x8c, 0x1a, 0x19, 0xb9, 0x58,
	0x9d, 0x43, 0x82, 0x02, 0x9c, 0x85, 0x1c, 0xb9, 0x38, 0xe1, 0x76, 0x0b, 0x49, 0xea, 0x41, 0x9d,
	0xae, 0x87, 0xee, 0x6e, 0x29, 0x71, 0x6c, 0x52, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x42, 0xa6, 0x5c,
	0xac, 0x60, 0x2b, 0x85, 0x44, 0xe1, 0x6a, 0x90, 0x1d, 0x29, 0x25, 0x8c, 0x2e, 0x0c, 0xd6, 0x96,
	0xc4, 0x06, 0x0e, 0x2d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x47, 0x4f, 0xdd, 0x3c,
	0x01, 0x00, 0x00,
}
