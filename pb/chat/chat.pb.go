// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

/*
Package chatrpc is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	ChatMsgRequest
	ChatMsgReply
*/
package chatrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type ChatMsgRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid   int64  `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Uname int32  `protobuf:"varint,3,opt,name=uname" json:"uname,omitempty"`
}

func (m *ChatMsgRequest) Reset()                    { *m = ChatMsgRequest{} }
func (m *ChatMsgRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatMsgRequest) ProtoMessage()               {}
func (*ChatMsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChatMsgRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatMsgRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ChatMsgRequest) GetUname() int32 {
	if m != nil {
		return m.Uname
	}
	return 0
}

// The response message containing the greetings
type ChatMsgReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *ChatMsgReply) Reset()                    { *m = ChatMsgReply{} }
func (m *ChatMsgReply) String() string            { return proto.CompactTextString(m) }
func (*ChatMsgReply) ProtoMessage()               {}
func (*ChatMsgReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChatMsgReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*ChatMsgRequest)(nil), "chatrpc.ChatMsgRequest")
	proto.RegisterType((*ChatMsgReply)(nil), "chatrpc.ChatMsgReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatRpc service

type ChatRpcClient interface {
	// Sends a login
	Chat(ctx context.Context, in *ChatMsgRequest, opts ...grpc.CallOption) (*ChatMsgReply, error)
}

type chatRpcClient struct {
	cc *grpc.ClientConn
}

func NewChatRpcClient(cc *grpc.ClientConn) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) Chat(ctx context.Context, in *ChatMsgRequest, opts ...grpc.CallOption) (*ChatMsgReply, error) {
	out := new(ChatMsgReply)
	err := grpc.Invoke(ctx, "/chatrpc.ChatRpc/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatRpc service

type ChatRpcServer interface {
	// Sends a login
	Chat(context.Context, *ChatMsgRequest) (*ChatMsgReply, error)
}

func RegisterChatRpcServer(s *grpc.Server, srv ChatRpcServer) {
	s.RegisterService(&_ChatRpc_serviceDesc, srv)
}

func _ChatRpc_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatrpc.ChatRpc/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).Chat(ctx, req.(*ChatMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatrpc.ChatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _ChatRpc_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0xb1, 0x8b, 0x0a, 0x92, 0x95, 0x7c, 0xb8,
	0xf8, 0x9c, 0x33, 0x12, 0x4b, 0x7c, 0x8b, 0xd3, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xcc, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x10, 0x53,
	0x48, 0x84, 0x8b, 0xb5, 0x14, 0xac, 0x8c, 0x59, 0x81, 0x51, 0x83, 0x35, 0x08, 0xc2, 0x51, 0x52,
	0xe3, 0xe2, 0x81, 0x9b, 0x56, 0x90, 0x53, 0x29, 0x24, 0xc6, 0xc5, 0x56, 0x94, 0x5a, 0x5c, 0x9a,
	0x53, 0x02, 0x36, 0x8d, 0x35, 0x08, 0xca, 0x33, 0x72, 0xe6, 0x62, 0x07, 0xa9, 0x0b, 0x2a, 0x48,
	0x16, 0xb2, 0xe0, 0x62, 0x01, 0x31, 0x85, 0xc4, 0xf5, 0xa0, 0x4e, 0xd2, 0x43, 0x75, 0x8f, 0x94,
	0x28, 0xa6, 0x44, 0x41, 0x4e, 0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x2b, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x93, 0xcd, 0x36, 0xd8, 0x00, 0x00, 0x00,
}
